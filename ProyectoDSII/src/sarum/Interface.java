package sarum;



import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import paquete.Main;



public class Interface extends javax.swing.JFrame {
    Main mm= new Main();
    private JTextField jtf[][];
    private JLabel jl[];
    private Grafo grafoOriginal;

    Lienzo Graficar;
    JPanel scroll;
    JLabel JL_imagen = new JLabel();
    JLabel JL_imagen2 = new JLabel();
   private String rutaArchivo1, rutaArchivo2;
    public static SARUM sarum;
    public static boolean escogerDesdeMouse=true;
    public static int xOrigen, yOrigen, xDestino, yDestino;


//varaibles para la lectura dela matriz
static String matrizEstaciones [][];//matriz  de paradas

int NoParadas=-1;

//Variables para lectura de archivos
 File objeto;

 BufferedReader entrada;

 LineNumberReader entradaLength;

 String sAux="";

static boolean activarL=false;

int con=0;
 //Variables String Para los campos de la matriz de paradas
 String tipo_paradas="";

 String indice="";

 String nombre="";

 String coord = "";

 StringTokenizer tokens;
  
 
JScrollPane bar;
public static boolean activarLienzo(){

return activarL;
}
    public Interface() {
        super ("SARUM");
        initComponents();
        grafoOriginal = new Grafo();
        Graficar = new Lienzo();
        Graficar.setSize(2000,2000);
        sarum = new SARUM();

 
       bar= new JScrollPane(Graficar);
    
       
      bar.setBounds(20,100,1050,620);
      bar.setPreferredSize(new Dimension(1000,1000));
    


    PanelDeLaMatriz.setVisible(false);
    this.setSize(1100, 790);
    this.setLocationRelativeTo(null);
    this.add(bar);


    }


 public String[][] dimensionMatrizParadas() throws FileNotFoundException, IOException{

    entrada = new BufferedReader(new FileReader(objeto));
   entradaLength = new  LineNumberReader(new FileReader(objeto));

     while (!(sAux = entrada.readLine()).equals("rutas")){
           NoParadas++;
           //System.out.println(sAux);
        //cantidadSimbol(sAux,"paradas");
     }
     matrizEstaciones = new String[NoParadas][4];
 //System.out.println("tamaÃ±o matriz : "+matrizEstaciones.length);
     entrada.close();
     return matrizEstaciones;
    }


public int cantidadNodos(){
//System.out.println("numero de paradas estaciones : "+NoParadas);

return NoParadas;
}


public String[][] llenarMatrizDeParadas() throws Exception{
    String simbolos="";
            //if (objeto.exists()){ } else{}
 entrada = new BufferedReader(new FileReader(objeto));
   entradaLength = new  LineNumberReader(new FileReader(objeto));

int i=0;
    while (!(sAux = entrada.readLine()).equals("rutas")){

         if(con>0){
        simbolos=sAux;
           //System.out.println(sAux);
        //cantidadSimbol(sAux,"paradas");
     tokens=new StringTokenizer(simbolos);
    tipo_paradas=(tokens.nextToken("#"));
    indice=(tokens.nextToken("#"));
    nombre=(tokens.nextToken("#"));
    coord = (tokens.nextToken("#\n"));

//System.out.print(matrizEstaciones.length);
                    matrizEstaciones[i][0]=tipo_paradas;
                    matrizEstaciones[i][1]=indice;
                    matrizEstaciones[i][2]=nombre;
                    matrizEstaciones[i][3]=coord;
                    i++;
        }
        con++;
    }
  imprimirMatriz(matrizEstaciones);
    entrada.close();
    return matrizEstaciones;
  }

public void imprimirMatriz(String mat[][]){

    for(int h=0; h<mat.length; h++){

      for(int k=0;k<4; k++){
          
          System.out.print(mat[h][k]);

      }
      System.out.print("\n");
    }

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        PanelBotones1 = new javax.swing.JPanel();
        LabelCantidadNodos = new javax.swing.JLabel();
        JBgenerarMatrizEntrada = new javax.swing.JButton();
        JBeliminarMatriz = new javax.swing.JButton();
        JBaplicar = new javax.swing.JButton();
        PanelDeLaMatriz = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        RutaArchivo = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SARUM");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        PanelBotones1.setBackground(new java.awt.Color(26, 235, 99));

        LabelCantidadNodos.setText("Bienvenidos");

        JBgenerarMatrizEntrada.setText("Generar Mapa Estaciones");
        JBgenerarMatrizEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBgenerarMatrizEntradaActionPerformed(evt);
            }
        });

        JBeliminarMatriz.setText("Limpiar Matriz");
        JBeliminarMatriz.setEnabled(false);
        JBeliminarMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBeliminarMatrizActionPerformed(evt);
            }
        });

        JBaplicar.setText("Conexiones de Rutas");
        JBaplicar.setEnabled(false);
        JBaplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBaplicarActionPerformed(evt);
            }
        });

        PanelDeLaMatriz.setBackground(new java.awt.Color(255, 102, 0));
        PanelDeLaMatriz.setAutoscrolls(true);
        PanelDeLaMatriz.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        PanelDeLaMatriz.setMaximumSize(new java.awt.Dimension(327, 367));
        PanelDeLaMatriz.setPreferredSize(new java.awt.Dimension(5, 10));
        PanelDeLaMatriz.setLayout(new java.awt.GridLayout(2, 4, 5, 10));

        jButton1.setText("Cargar Origen Destino");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Calcular Ruta");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Escojer Otros Puntos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelBotones1Layout = new javax.swing.GroupLayout(PanelBotones1);
        PanelBotones1.setLayout(PanelBotones1Layout);
        PanelBotones1Layout.setHorizontalGroup(
            PanelBotones1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBotones1Layout.createSequentialGroup()
                .addGroup(PanelBotones1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelBotones1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelBotones1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(PanelBotones1Layout.createSequentialGroup()
                                .addComponent(JBaplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addGroup(PanelBotones1Layout.createSequentialGroup()
                                .addComponent(LabelCantidadNodos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(JBgenerarMatrizEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(JBeliminarMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jButton3))
                    .addComponent(PanelDeLaMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(471, Short.MAX_VALUE))
        );
        PanelBotones1Layout.setVerticalGroup(
            PanelBotones1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBotones1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelBotones1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelCantidadNodos)
                    .addComponent(JBgenerarMatrizEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBeliminarMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelBotones1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBaplicar)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(PanelDeLaMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu1.setText("Archivo");

        RutaArchivo.setText("Cargar Archivo Mapa");
        RutaArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RutaArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(RutaArchivo);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Salir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");

        jMenuItem3.setText("Acerca de...");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelBotones1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelBotones1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(824, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**Lleva los datos de ingreso al grafo**/

    Funcional funcional = new Funcional();

    int matAdyacenTemporal[][];

    private void generarMatriz(int num) throws FileNotFoundException, IOException {

        //Filas, Columnas, Horizontal Gap, Vertical Gap

        PanelDeLaMatriz.setLayout(new java.awt.GridLayout(num + 1, num + 1, 5, 10));

        jtf = new JTextField[num][num];
        //System.out.print(cantidadNodos());
        funcional.numeroLineaApartirLeer(cantidadNodos());
        funcional.iniciarTodo();
        matAdyacenTemporal=funcional.retornatMatrizAdyacencia();
        //int cont = jtf.length;
        for (int i = 0; i < num; i++) { //filas

            //Label para la primera columna de la matriz visual
            //que lleva los nombres de los nodos
            //JLabel tempLabel = new JLabel(jl[i].getText());
            JLabel tempLabel = new JLabel(matrizEstaciones[i][2]);
            ////////////////////////////////////////////////////
            tempLabel.setHorizontalAlignment(JLabel.CENTER);
            tempLabel.setFont(new java.awt.Font("Dialog", java.awt.Font.BOLD, 16));
            PanelDeLaMatriz.add(tempLabel);

            for (int j = 0; j < num; j++) { //columnas
                //jtf[i][j] = new JTextField("0");

                  jtf[i][j] = new JTextField((String.valueOf(matAdyacenTemporal[i][j])));

                jtf[i][j].setHorizontalAlignment(JTextField.CENTER);
                System.out.print(matAdyacenTemporal[i][j]);
                jtf[i][j].setFont(new java.awt.Font("Dialog", java.awt.Font.BOLD, 16));

                PanelDeLaMatriz.add(jtf[i][j]);
            }
        }
        System.out.print("\n");
        JBgenerarMatrizEntrada.setEnabled(false);
        JBeliminarMatriz.setEnabled(true);
       // PanelDeLaMatriz.setVisible(true);
    }

    private void JBgenerarMatrizEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBgenerarMatrizEntradaActionPerformed
        try {
            try {
                dimensionMatrizParadas();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
            grafoOriginal = new Grafo();
            int CantNodos = cantidadNodos();
            Punto.NodosTotales = CantNodos;
            String[][] matriz;
            matriz = llenarMatrizDeParadas();
            String ingreso;
            String coodenada;
            boolean salidaNodosExitosa = true;
            boolean verticeRepetida = false;
            for (int i = 0; i < CantNodos; i++) {
                do {
                    ingreso = matriz[i][2];
                    coodenada = matriz[i][3];
                    //ingreso = JOptionPane.showInputDialog(this, "Ingrese el nodo " + (i) + " :", "Ingreso de Nodos", JOptionPane.INFORMATION_MESSAGE);
                    verticeRepetida = grafoOriginal.existeNodo(ingreso);
                    if (verticeRepetida) {
                        JOptionPane.showMessageDialog(this, "Este nodo ya fue ingresado", "Error de Ingreso", JOptionPane.ERROR_MESSAGE);
                    }
                } while (verticeRepetida);
                if (ingreso != null) {
                    grafoOriginal.ingresarNodo(ingreso, coodenada);
                  //  System.out.println("Ingreso de NODO: " + ingreso);
                } else {
                    System.out.println("No se ingreso nodo");
                    salidaNodosExitosa = false;
                    break;
                }
            }
          if (salidaNodosExitosa) {
              /////////////////
                jl = new JLabel[CantNodos];
                JLabel decoy = new JLabel(" ");
                decoy.setHorizontalAlignment(JLabel.CENTER);
                PanelDeLaMatriz.add(decoy);
                for (int i = 0; i < CantNodos; i++) {
                    jl[i] = new JLabel(grafoOriginal.nombres.get(i));
                    jl[i].setFont(new java.awt.Font("Dialog", java.awt.Font.BOLD, 16));
                    jl[i].setHorizontalAlignment(JLabel.CENTER);
                    PanelDeLaMatriz.add(jl[i]);
                }
                generarMatriz(CantNodos);
            ////////
                JBaplicar.setEnabled(true);
                Graficar.original = this.grafoOriginal;
                //grafoSalida = new Grafo();
                Graficar.repaint();
            }
        } catch (Exception ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_JBgenerarMatrizEntradaActionPerformed

    private void JBeliminarMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBeliminarMatrizActionPerformed
        PanelDeLaMatriz.removeAll();
        Graficar.original = null;
        Graficar.arbol = null;
        Graficar.repaint();

        JBgenerarMatrizEntrada.setEnabled(true);
        JBeliminarMatriz.setEnabled(false);
        JBaplicar.setEnabled(false);
        PanelDeLaMatriz.setVisible(true);
    }//GEN-LAST:event_JBeliminarMatrizActionPerformed

    private void JBaplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBaplicarActionPerformed

        activarL=true;
        for (int i = 0; i < jl.length; i++) {
            for (int j = 0; j < jl.length; j++) {
                if (Integer.parseInt(jtf[i][j].getText()) == 0) {
                    continue;
                }
                grafoOriginal.ingresarEnlace(jl[i].getText(), jl[j].getText(), Integer.parseInt(jtf[i][j].getText()));
                //jtf[i][j].setText("1");
            }
        }
        JBaplicar.setEnabled(false);

        PintarLineas krus = new PintarLineas(Graficar);
        krus.aplicar(grafoOriginal);
    }//GEN-LAST:event_JBaplicarActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed


    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void RutaArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RutaArchivoActionPerformed
        JFileChooser chooser2 = new JFileChooser();
        SelecionarArchivoTxt archTxt= new SelecionarArchivoTxt();
        chooser2.setApproveButtonText("Abrir TxT");
        chooser2.addChoosableFileFilter(archTxt);
        chooser2.showOpenDialog(null);
        objeto=chooser2.getSelectedFile();
        rutaArchivo1=objeto.toString();
        //mm.obtenerRuta(rutaArchivo1);
        boolean esTxt= archTxt.accept(objeto);
        if(esTxt){
         System.out.println("la ruta es"+objeto);
        }

        else System.out.println("el arcivo no es un txt");
       funcional.setObjeto(objeto);
       

    }//GEN-LAST:event_RutaArchivoActionPerformed

    public static String [][] getMatriz(){

    return matrizEstaciones;
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        HallarPuntosMasCercano masCerca = new HallarPuntosMasCercano();

        JFileChooser chooser = new JFileChooser();
        SelecionarArchivoTxt archTxt= new SelecionarArchivoTxt();
        chooser.setApproveButtonText("Abrir TxT");
        chooser.addChoosableFileFilter(archTxt);
        chooser.showOpenDialog(null);
        File archivo=chooser.getSelectedFile();
        rutaArchivo2=archivo.toString();
        escogerDesdeMouse=false;
        boolean esTxt= archTxt.accept(archivo);
        if(esTxt){
         System.out.println("la ruta es"+archivo);
            try {
                masCerca.setArchivo(archivo);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        else System.out.println("el arcivo no es un txt");

       masCerca.iniciarPuntos(matrizEstaciones, 0.0, 0.0, 0.0, 0.0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        HallarRutas Hruta = new HallarRutas();
        Hruta.traerDatos();
         
        try {
            if(escogerDesdeMouse)
            {
              
               
                sarum.capturarParadas(rutaArchivo1);
                sarum.capturarRutas(rutaArchivo1);
                sarum.itinerariosMouse(xOrigen, yOrigen, xDestino, yDestino);
               // sarum.imprimirEnArchivo();
            }
            else
            {
               
                
                sarum.itinerariosArchivo(rutaArchivo1, rutaArchivo2);
                sarum.imprimirEnArchivo();
            }
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Graficar.setClic();
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBaplicar;
    private javax.swing.JButton JBeliminarMatriz;
    private javax.swing.JButton JBgenerarMatrizEntrada;
    private javax.swing.JLabel LabelCantidadNodos;
    private javax.swing.JPanel PanelBotones1;
    private javax.swing.JPanel PanelDeLaMatriz;
    private javax.swing.JMenuItem RutaArchivo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    // End of variables declaration//GEN-END:variables
}
